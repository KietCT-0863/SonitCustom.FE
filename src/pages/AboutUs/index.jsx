import React, { useRef, useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import './styles.css';
import ScrollToTop from '../../components/ScrollToTop';
const AboutUs = () => {
  const timelineRef = useRef(null);
  const [activeIndex, setActiveIndex] = useState(0);
  
  const milestones = [
    {
      year: "2020",
      title: "Kh·ªüi Ngu·ªìn ƒêam M√™",
      description: "SONIT CUSTOM ƒë∆∞·ª£c th√†nh l·∫≠p b·ªüi nh·ªØng ng∆∞·ªùi ngh·ªá nh√¢n ƒëam m√™ billiard v·ªõi s·ª© m·ªánh n√¢ng t·∫ßm tr·∫£i nghi·ªám ch∆°i billiard cho ng∆∞·ªùi Vi·ªát. Nh·ªØng s·∫£n ph·∫©m ƒë·∫ßu ti√™n ra ƒë·ªùi t·ª´ m·ªôt x∆∞·ªüng s·∫£n xu·∫•t nh·ªè t·∫°i TP.HCM.",
      icon: "üåü"
    },
    {
      year: "2021",
      title: "Ph√°t Tri·ªÉn D·ªãch V·ª•",
      description: "M·ªü r·ªông x∆∞·ªüng s·∫£n xu·∫•t v√† ƒë·ªôi ng≈© ngh·ªá nh√¢n chuy√™n nghi·ªáp. Gi·ªõi thi·ªáu d·ªãch v·ª• custom cue cao c·∫•p v√† tr·ªü th√†nh ƒë·ªëi t√°c c·ªßa nhi·ªÅu tay ch∆°i billiard h√†ng ƒë·∫ßu Vi·ªát Nam.",
      icon: "üî®"
    },
    {
      year: "2022",
      title: "ƒê·ªëi T√°c To√†n C·∫ßu",
      description: "Thi·∫øt l·∫≠p quan h·ªá h·ª£p t√°c v·ªõi c√°c th∆∞∆°ng hi·ªáu billiard n·ªïi ti·∫øng th·∫ø gi·ªõi nh∆∞ Predator, Mezz v√† McDermott. Ra m·∫Øt b·ªô s∆∞u t·∫≠p SONIT Signature v·ªõi c√¥ng ngh·ªá ƒë·ªôc quy·ªÅn.",
      icon: "ü§ù"
    },
    {
      year: "2023",
      title: "V∆∞∆°n T·∫ßm Qu·ªëc T·∫ø",
      description: "M·ªü r·ªông th·ªã tr∆∞·ªùng xu·∫•t kh·∫©u sang c√°c n∆∞·ªõc ƒê√¥ng Nam √Å v√† ch√¢u √Çu. Tham gia v√† t√†i tr·ª£ cho c√°c gi·∫£i ƒë·∫•u billiard qu·ªëc t·∫ø, qu·∫£ng b√° th∆∞∆°ng hi·ªáu Vi·ªát tr√™n tr∆∞·ªùng qu·ªëc t·∫ø.",
      icon: "üåè"
    },
    {
      year: "2024",
      title: "ƒê·ªïi M·ªõi & S√°ng T·∫°o",
      description: "Ra m·∫Øt d√≤ng s·∫£n ph·∫©m SONIT Elite v·ªõi c√¥ng ngh·ªá gia c√¥ng ti√™n ti·∫øn nh·∫•t. Khai tr∆∞∆°ng showroom m·ªõi t·∫°i H√† N·ªôi v√† ƒê√† N·∫µng, mang tr·∫£i nghi·ªám s·∫£n ph·∫©m ƒë·∫øn g·∫ßn h∆°n v·ªõi kh√°ch h√†ng.",
      icon: "üí´"
    }
  ];

  const values = [
    {
      icon: "üíé",
      title: "Ch·∫•t L∆∞·ª£ng ƒê·ªânh Cao",
      description: "M·ªói s·∫£n ph·∫©m ƒë·ªÅu ƒë∆∞·ª£c ch·ªçn l·ªçc v√† ki·ªÉm tra k·ªπ l∆∞·ª°ng ƒë·ªÉ ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng t·ªët nh·∫•t",
      color: "#FFD700"
    },
    {
      icon: "üéØ",
      title: "ƒê·ªôc Quy·ªÅn & S√°ng T·∫°o",
      description: "Thi·∫øt k·∫ø ƒë·ªôc quy·ªÅn, s√°ng t·∫°o kh√¥ng ng·ª´ng ƒë·ªÉ t·∫°o ra nh·ªØng s·∫£n ph·∫©m ƒë·ªôc ƒë√°o",
      color: "#E6007E"
    },
    {
      icon: "ü§ù",
      title: "D·ªãch V·ª• T·∫≠n T√¢m",
      description: "ƒê·ªôi ng≈© chuy√™n gia gi√†u kinh nghi·ªám, s·∫µn s√†ng t∆∞ v·∫•n v√† h·ªó tr·ª£ 24/7",
      color: "#4CAF50"
    },
    {
      icon: "üöÄ",
      title: "ƒê·ªïi M·ªõi Li√™n T·ª•c",
      description: "Kh√¥ng ng·ª´ng c·∫≠p nh·∫≠t xu h∆∞·ªõng v√† c√¥ng ngh·ªá m·ªõi trong ng√†nh billiard",
      color: "#2196F3"
    }
  ];

  const achievements = [
    { number: "1000+", label: "Kh√°ch H√†ng H√†i L√≤ng" },
    { number: "500+", label: "M·∫´u Cue ƒê·ªôc Quy·ªÅn" },
    { number: "50+", label: "ƒê·ªëi T√°c To√†n C·∫ßu" },
    { number: "10+", label: "NƒÉm Kinh Nghi·ªám" }
  ];

  const fadeInUp = {
    hidden: { opacity: 0, y: 30 },
    visible: { opacity: 1, y: 0 }
  };

  const staggerContainer = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2
      }
    }
  };

  const scrollTimeline = (direction) => {
    if (timelineRef.current) {
      const scrollAmount = direction === 'left' ? -400 : 400;
      timelineRef.current.scrollBy({
        left: scrollAmount,
        behavior: 'smooth'
      });
    }
  };

  const scrollToMilestone = (index) => {
    if (timelineRef.current) {
      const items = timelineRef.current.querySelectorAll('.timeline-item');
      if (items[index]) {
        const scrollPosition = items[index].offsetLeft - (timelineRef.current.clientWidth / 2) + (items[index].clientWidth / 2);
        
        timelineRef.current.scrollTo({
          left: scrollPosition,
          behavior: 'smooth'
        });
        
        setActiveIndex(index);
      }
    }
  };

  useEffect(() => {
    const handleScroll = () => {
      if (timelineRef.current) {
        const scrollPosition = timelineRef.current.scrollLeft;
        const viewportWidth = timelineRef.current.clientWidth;
        const items = Array.from(timelineRef.current.querySelectorAll('.timeline-item'));
        
        let itemFound = false;
        
        items.forEach((item, index) => {
          const itemCenter = item.offsetLeft - timelineRef.current.offsetLeft + (item.offsetWidth / 2);
          const viewportCenter = scrollPosition + (viewportWidth / 2);
          
          if (Math.abs(itemCenter - viewportCenter) < item.offsetWidth * 0.75 && !itemFound) {
            setActiveIndex(index);
            itemFound = true;
          }
        });
      }
    };
    
    const timelineElement = timelineRef.current;
    if (timelineElement) {
      timelineElement.addEventListener('scroll', handleScroll);
    }
    
    return () => {
      if (timelineElement) {
        timelineElement.removeEventListener('scroll', handleScroll);
      }
    };
  }, []);

  return (
    <div className="about-us">
      {/* Hero Section */}
      <motion.section 
        className="about-hero"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 1.5 }}
      >
        <div className="hero-overlay"></div>
        <motion.div 
          className="hero-content"
          initial={{ y: 50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.5, duration: 1 }}
        >
          <h1>SONIT CUSTOM</h1>
          <p>N∆°i Ngh·ªá Thu·∫≠t G·∫∑p G·ª° ƒêam M√™ Billiard</p>
          <motion.div 
            className="hero-stats"
            variants={staggerContainer}
            initial="hidden"
            animate="visible"
          >
            {achievements.map((achievement, index) => (
              <motion.div 
                key={index}
                className="stat-item"
                variants={fadeInUp}
              >
                <span className="stat-number">{achievement.number}</span>
                <span className="stat-label">{achievement.label}</span>
              </motion.div>
            ))}
          </motion.div>
        </motion.div>
      </motion.section>

      {/* Story Section */}
      <section className="about-story">
        <motion.div 
          className="story-content"
          initial={{ opacity: 0, y: 50 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 1 }}
        >
          <h2>C√¢u Chuy·ªán C·ªßa Ch√∫ng T√¥i</h2>
          <div className="story-grid">
            <div className="story-text">
              <p>
                SONIT CUSTOM ƒë∆∞·ª£c th√†nh l·∫≠p b·ªüi nh·ªØng ng∆∞·ªùi ƒëam m√™ billiard, v·ªõi kh√°t v·ªçng mang ƒë·∫øn nh·ªØng s·∫£n ph·∫©m billiard ƒë·∫≥ng c·∫•p th·∫ø gi·ªõi cho ng∆∞·ªùi ch∆°i Vi·ªát Nam.
              </p>
              <p>
                Ch√∫ng t√¥i kh√¥ng ch·ªâ ƒë∆°n thu·∫ßn l√† n∆°i cung c·∫•p c√°c s·∫£n ph·∫©m billiard, m√† c√≤n l√† n∆°i t·∫°o ra nh·ªØng t√°c ph·∫©m ngh·ªá thu·∫≠t ƒë·ªôc ƒë√°o, k·∫øt h·ª£p gi·ªØa th·∫©m m·ªπ v√† c√¥ng nƒÉng.
              </p>
              <p>
                V·ªõi ƒë·ªôi ng≈© th·ª£ th·ªß c√¥ng l√†nh ngh·ªÅ v√† c√°c chuy√™n gia trong ng√†nh, ch√∫ng t√¥i t·ª± h√†o mang ƒë·∫øn nh·ªØng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao nh·∫•t, ƒë√°p ·ª©ng m·ªçi nhu c·∫ßu c·ªßa ng∆∞·ªùi ch∆°i billiard chuy√™n nghi·ªáp.
              </p>
            </div>
            <div className="story-image">
              <img src="/assets/about/workshop.jpg" alt="SONIT CUSTOM Workshop" />
            </div>
          </div>
        </motion.div>
      </section>

      {/* Values Section */}
      <section className="about-values">
        <h2>Gi√° Tr·ªã C·ªët L√µi</h2>
        <motion.div 
          className="values-grid"
          variants={staggerContainer}
          initial="hidden"
          whileInView="visible"
          viewport={{ once: true }}
        >
          {values.map((value, index) => (
            <motion.div 
              key={index}
              className="value-card"
              variants={fadeInUp}
              whileHover={{ scale: 1.05, transition: { duration: 0.3 } }}
            >
              <div className="value-icon" style={{ backgroundColor: value.color }}>
                <span>{value.icon}</span>
              </div>
              <h3>{value.title}</h3>
              <p>{value.description}</p>
            </motion.div>
          ))}
        </motion.div>
      </section>

      {/* Milestones Section */}
      <section className="about-milestones">
        <motion.h2
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8 }}
        >H√†nh Tr√¨nh Ph√°t Tri·ªÉn</motion.h2>
        
        <div className="timeline">
          <motion.div 
            className="timeline-wrapper"
            ref={timelineRef}
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5 }}
          >
            {milestones.map((milestone, index) => (
              <motion.div 
                key={index}
                className="timeline-item"
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ 
                  duration: 0.8, 
                  delay: index * 0.1,
                  type: "spring",
                  stiffness: 50
                }}
              >
                <motion.div 
                  className="timeline-icon"
                  initial={{ scale: 0 }}
                  whileInView={{ scale: 1 }}
                  viewport={{ once: true }}
                  transition={{ 
                    duration: 0.5, 
                    delay: index * 0.1 + 0.2,
                    type: "spring" 
                  }}
                >
                  {milestone.icon}
                </motion.div>
                
                <motion.div 
                  className="timeline-content"
                  initial={{ y: 20, opacity: 0 }}
                  whileInView={{ y: 0, opacity: 1 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.5, delay: index * 0.1 + 0.4 }}
                  whileHover={{ 
                    scale: 1.02,
                    transition: { duration: 0.3 }
                  }}
                >
                  <motion.span 
                    className="year"
                    initial={{ scale: 0.8 }}
                    whileInView={{ scale: 1 }}
                    viewport={{ once: true }}
                    transition={{ duration: 0.3, delay: index * 0.1 + 0.6 }}
                  >
                    {milestone.year}
                  </motion.span>
                  <h3>{milestone.title}</h3>
                  <p>{milestone.description}</p>
                </motion.div>
              </motion.div>
            ))}
          </motion.div>
          
          <div className="timeline-dots">
            {milestones.map((_, index) => (
              <motion.div
                key={index}
                className={`timeline-dot ${index === activeIndex ? 'active' : ''}`}
                onClick={() => scrollToMilestone(index)}
                whileHover={{ scale: 1.2 }}
                whileTap={{ scale: 0.9 }}
                animate={index === activeIndex ? {
                  scale: [1, 1.3, 1.2],
                  transition: { duration: 0.5 }
                } : {}}
              />
            ))}
          </div>
          
          <div className="timeline-nav">
            <motion.button 
              className="nav-button"
              onClick={() => scrollTimeline('left')}
              whileHover={{ scale: 1.1, backgroundColor: "rgba(212, 201, 190, 0.2)" }}
              whileTap={{ scale: 0.9 }}
            >
              ‚Üê
            </motion.button>
            <motion.button 
              className="nav-button"
              onClick={() => scrollTimeline('right')}
              whileHover={{ scale: 1.1, backgroundColor: "rgba(212, 201, 190, 0.2)" }}
              whileTap={{ scale: 0.9 }}
            >
              ‚Üí
            </motion.button>
          </div>
        </div>
      </section>

      {/* Contact Section */}
      <section className="about-contact">
        <motion.div 
          className="contact-content"
          initial={{ opacity: 0, y: 50 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8 }}
        >
          <h2>Li√™n H·ªá V·ªõi Ch√∫ng T√¥i</h2>
          <p>H√£y ƒë·ªÉ ch√∫ng t√¥i gi√∫p b·∫°n t√¨m ƒë∆∞·ª£c s·∫£n ph·∫©m ho√†n h·∫£o nh·∫•t</p>
          <div className="contact-info">
            <div className="contact-item">
              <span className="contact-icon">üìû</span>
              <p>+84 123 456 789</p>
            </div>
            <div className="contact-item">
              <span className="contact-icon">üìß</span>
              <p>contact@sonitcustom.com</p>
            </div>
            <div className="contact-item">
              <span className="contact-icon">üìç</span>
              <p>123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ, TP.HCM</p>
            </div>
          </div>
          <motion.button 
            className="contact-btn"
            whileHover={{ scale: 1.05, backgroundColor: "#D4C9BE" }}
            whileTap={{ scale: 0.95 }}
          >
            Li√™n H·ªá Ngay
          </motion.button>
        </motion.div>
      </section>
      <ScrollToTop />
    </div>
  );
};

export default AboutUs;